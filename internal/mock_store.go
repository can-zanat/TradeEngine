// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/store.go
//
// Generated by this command:
//
//	mockgen -source=./internal/store.go -destination=./internal/mock_store.go -package=internal
//

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateOrderLog mocks base method.
func (m *MockStore) CreateOrderLog(order map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderLog", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderLog indicates an expected call of CreateOrderLog.
func (mr *MockStoreMockRecorder) CreateOrderLog(order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderLog", reflect.TypeOf((*MockStore)(nil).CreateOrderLog), order)
}

// ListenRatesData mocks base method.
func (m *MockStore) ListenRatesData(callback func(float64, string)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenRatesData", callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenRatesData indicates an expected call of ListenRatesData.
func (mr *MockStoreMockRecorder) ListenRatesData(callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenRatesData", reflect.TypeOf((*MockStore)(nil).ListenRatesData), callback)
}
